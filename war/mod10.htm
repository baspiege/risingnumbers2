<!DOCTYPE HTML>
<!-- Copyright 2011 Brian Spiegel -->
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/>
<title>Mod 10</title>
<style type="text/css">
.board {text-align:center;font-size:400%;font-weight:bold;border:1px solid black;}
.times {line-height:2em;}
#elapsedTime {margin-right:2em;}
.board td {width:1em;border:1px solid black;}
.c1 {background-color: #ff0000; color: #ffffff;}
.c2 {background-color: #00ff00; color: #ffffff;}
.c3 {background-color: #0000ff; color: #ffffff;}
.c4 {background-color: #ff00ff; color: #000000;}
.c0 {background-color: #00ffff; color: #000000;}
.goal {background-color: #c0c0c0; color: #000000;}
.highlight {background-color: #ffffff; color: #000000;}
.highlightGoal { background-color: #ffff00; color: #000000;}
</style>
<script type="text/javascript">

//////////
// Global vars
//////////

var board;
var maxRow=0;
var maxCol=0;
var colGoals;
var rowGoals;
var selectedCol=-1;
var selectedRow=-1;

// Movement variables
var startCoor=null;
var currCoor=null;
var scrolling=false;
var cellMoving=null;
var cellOriginalZIndex=0;

// Time
var timeInterval=null;
var startTime=0;
var BEST_TIME_COOKIE="bestTime_";
var TIME_NOT_SET=-1;

//////////
// Utilities
//////////

// Create random number. 0 to max.
function createRandomNumber(max) {
  return Math.round( Math.random()*max );
}

function extractNumber(value) {
  var n = parseInt(value);
  return n == null || isNaN(n) ? 0 : n;
}

function getCookie(name) {
  if (document.cookie.length>0) {
    var start=document.cookie.indexOf(name+"=");
    if (start!=-1) {
      start+=name.length+1;
      var end=document.cookie.indexOf(";",start);
      if (end==-1) {
        end=document.cookie.length;
      }
      return unescape(document.cookie.substring(start,end));
    }
  }
  return "";
}

function removeChildrenFromElement(element) {
  if (element.hasChildNodes()) {
    while (element.childNodes.length>0) {
      element.removeChild(element.firstChild);
    }
  }
}

function setCookie(name,value,daysToExpire) {
  var date=new Date();
  date.setDate(date.getDate()+daysToExpire);
  document.cookie=name+"="+escape(value)+((daysToExpire==null)?"":";expires="+date.toUTCString());
}

function shuffle(array) {
  var i = array.length;
  if (i==0) {
    return false;
  }
  while ( --i ) {
    var j = Math.floor( Math.random()*(i+1) );
    var tempi = array[i];
    var tempj = array[j];
    array[i] = tempj;
    array[j] = tempi;
  }
}

//////////
// Board utilities
//////////

// Check game over
// Also highlights goals
function checkGameOver() {
  var allAttained=true;
  for (var i=0;i<maxRow;i++) {
    if (getRowTotalMod10(i)==rowGoals[i]) {
      updateRowGoal(i,true);
    } else {
      updateRowGoal(i,false);
      allAttained=false;
    }
  }
  for (var i=0;i<maxCol;i++) {
    if (getColTotalMod10(i)==colGoals[i]) {
      updateColGoal(i,true);
    } else {
      updateColGoal(i,false);
      allAttained=false;
    }
  }
  return allAttained;
}

function gameOver() {
  stopTimer();
  var elapsedTime=calculateTime();
  var bestTime=getBestTime();
  if (bestTime==TIME_NOT_SET || elapsedTime<bestTime) {
    setCookie(BEST_TIME_COOKIE + maxRow, elapsedTime, 365);
    updateBestTimeDisplay();
  }
  alert("Done!");
}

function getBestTime() {
  var bestTime=getCookie(BEST_TIME_COOKIE + maxRow);
  if (bestTime=="") {
    return TIME_NOT_SET;
  } else {
    return parseInt(bestTime);
  }
}

// Get col total
function getColTotalMod10(col) {
  var colCount=0;
  for (var i=0;i<maxRow;i++) {
    var num=board[col][i];
    colCount+=num;
  }
  return colCount%10;
}

// Get row total
function getRowTotalMod10(row) {
  var rowCount=0;
  for (var i=0;i<maxCol;i++) {
    var num=board[i][row];
    rowCount+=num;
  }
  return rowCount%10;
}

//////////
// Action
//////////

// Select cell
function selectCell(col,row)
{
  // If no previous selected, select.
  if (selectedCol==-1 && selectedRow==-1) {
    selectedCol=col;
    selectedRow=row;
    updateCell(col,row,true); // Highlight selected
  }
  // If selected is same as previous, unselect.
  else if (selectedCol==col && selectedRow==row) {
    selectedCol=-1;
    selectedRow=-1;
    updateCell(col,row,false);
  }
  // Switch cells
  else {
    var selectedNumber=board[selectedCol][selectedRow];
    board[selectedCol][selectedRow]=board[col][row];
    board[col][row]=selectedNumber;
    // Update display
    updateCell(selectedCol,selectedRow,false);
    updateCell(col,row,false);
    // Deselect for next
    selectedCol=-1;
    selectedRow=-1;
    if (checkGameOver()){
      gameOver();
    }
  }
}

//////////
// Set-up
//////////

// Create board
function createBoard() {
  board=new Array(maxCol);
  for (var i=0;i<maxCol;i++) {
    board[i]=new Array();
    for (var j=0;j<maxRow;j++) {
      board[i].push( createRandomNumber(9) );
    }
  }
  // Col goals
  colGoals=new Array();
  for (var i=0;i<maxCol;i++) {
    colGoals.push( getColTotalMod10(i) );
  }
  // Row goals
  rowGoals=new Array();
  for (var i=0;i<maxRow;i++) {
    rowGoals.push( getRowTotalMod10(i) );
  }
  // Put columns into one array and shuffle.
  var numbers=new Array();
  for (var i=0;i<maxCol;i++) {
    numbers=numbers.concat(board[i]);
  }
  // Shuffle 3 times
  shuffle(numbers);
  shuffle(numbers);
  shuffle(numbers);
  // Put back
  for (var j=0; j<maxRow; j++) {
    for (var i=0;i<maxCol;i++) {
      board[i][j]= numbers.shift();
    }
  }
}

//////////
// Display
//////////

// Create board display
function createBoardDisplay(display) {
  // Times
  var times=document.createElement("div");
  times.setAttribute("class", "times");
  display.appendChild(times);
  // Current time
  times.appendChild(document.createTextNode("Time: "));
  var elapsedTime=document.createElement("span");
  elapsedTime.setAttribute("id", "elapsedTime");
  elapsedTime.appendChild(document.createTextNode("0"));
  times.appendChild(elapsedTime);
  // Best time
  times.appendChild(document.createTextNode("Best: "));
  var bestTime=document.createElement("span");
  bestTime.setAttribute("id", "bestTime");
  times.appendChild(bestTime);
  // Board
  var table=document.createElement("table");
  table.setAttribute("class", "board");
  display.appendChild(table);
  // Each row
  for (var i=0; i<maxRow ; i++) {
    var row=document.createElement("tr");
    table.appendChild(row);
    for (var j=0; j<maxCol; j++) {
      var number=board[j][i];
      var cell=document.createElement("td");
      cell.setAttribute("id",j+","+i);
      cell.setAttribute("onclick", "selectCell("+j+","+i+")");
      row.appendChild(cell);
      var cellDiv=document.createElement("div");
      cellDiv.setAttribute("class","c"+number%5);
      cellDiv.appendChild(document.createTextNode(number));
      cell.appendChild(cellDiv);
    }
    // Row goals
    var goal=document.createElement("td");
    goal.setAttribute("class","goal");
    goal.setAttribute("id","rg"+i);
    goal.appendChild(document.createTextNode(rowGoals[i]));
    row.appendChild(goal);
  }
  // Bottom row - column goals
  var row=document.createElement("tr");
  table.appendChild(row);
  for (var j=0; j<maxCol; j++) {
    var goal=document.createElement("td");
    goal.setAttribute("class","goal");
    goal.setAttribute("id","cg"+j);
    goal.appendChild(document.createTextNode(colGoals[j]));
    row.appendChild(goal);
  }
  // "G" in bottom right corner
  var goal=document.createElement("td");
  goal.appendChild(document.createTextNode("G"));
  row.appendChild(goal);
}

function updateBestTimeDisplay() {
  var time=getBestTime();
  if (time==TIME_NOT_SET) {
    time="NA";
  }
  var bestTime=document.getElementById("bestTime");
  removeChildrenFromElement(bestTime);
  bestTime.appendChild(document.createTextNode(time));
}

// Update board
function updateBoard() {
  var board=document.getElementById("board")
  removeChildrenFromElement(board)
  createBoardDisplay(board);
}

// Update cell
function updateCell(col,row,highlight) {
  var number=board[col][row];
  var className;
  if (highlight==true) {
    className="highlight";
  } else {
    className="c"+number%5;
  }
  var cell=document.getElementById(col+","+row);
  removeChildrenFromElement(cell);
  var cellDiv=document.createElement("div");
  cellDiv.setAttribute("class",className);
  cellDiv.appendChild(document.createTextNode(number));
  cell.appendChild(cellDiv);
}

// Update col goal
function updateColGoal(col,highlight) {
  var goal=document.getElementById("cg" + col);
  if (highlight) {
    goal.className="highlightGoal";
  } else {
    goal.className="goal";
  }
}

// Update debug
function updateDebug(message) {
  document.getElementById("debug").innerHTML=message;
}

// Update row goal
function updateRowGoal(row,highlight) {
  var goal=document.getElementById("rg" + row);
  if (highlight) {
    goal.className="highlightGoal";
  } else {
    goal.className="goal";
  }
}

// Update elapsed time
function updateElapsedTime(time) {
  var elaspedTime=document.getElementById("elapsedTime");
  removeChildrenFromElement(elaspedTime);
  elaspedTime.appendChild(document.createTextNode(time));
}

//////////
// Movement Utilties
//////////

// Uses global variables startCoor, currCoor, and cellMoving
function checkCellInBoard() {
  var moving=false;
  // Check if in board
  var moving=false;
  var rows=document.getElementById("board").getElementsByTagName("tr");
  for (var i=0;i<(rows.length-1);i++){
    if (checkInElement(rows[i], currCoor.x, currCoor.y)){
      // Check if in cell.
      var cols=rows[i].getElementsByTagName("td");
      for (var j=0;j<(cols.length-1);j++){
        if (checkInElement(cols[j], currCoor.x, currCoor.y)){
          moving=true;
          // Get location
          var id=cols[j].getAttribute("id");
          var itemParts=id.split(",");
          var col=extractNumber(itemParts[0]);
          var row=extractNumber(itemParts[1]);
          // Switch numbers
          selectCell(col,row)
          // Reset position
          cellMoving.style.position = "static";
          cellMoving.style.left = 0;
          cellMoving.style.top = 0;
          // Reset variables
          startCoor=null;
          currCoor=null;
          return;
        }
      }
    }
  }
  // Revert back.
  if (!moving) {
    cellMoving.style.position="static";
    cellMoving.style.left=0;
    cellMoving.style.top=0;
  }
}

function checkInElement(element, posX, posY) {
  var coor=findPos(element);
  var targPosX=coor.x;
  var targPosY=coor.y;
  var targWidth=extractNumber(element.offsetWidth);
  var targHeight=extractNumber(element.offsetHeight);
  if ((posX>targPosX) && (posX<(targPosX+targWidth)) && (posY>targPosY) && (posY<(targPosY+targHeight))) {
      return true;
  }
  return false;
}

// Coordinates for movement
function Coordinates(x, y) {
  this.x=x;
  this.y=y;
}

function findPos(obj) {
  var left=0;
  var top=0;
  if (obj.offsetParent) {
    do {
      left+=obj.offsetLeft;
      top+=obj.offsetTop;
    } while (obj=obj.offsetParent);
  }
  return new Coordinates(left,top);
}

//////////
// Touch movement
//////////

// Get coordinates from a touch event
function getCoordinates(ev) {
  var x;
  var y;
  if (ev.touches && ev.touches.length) { // Multi touch
    x=ev.touches[0].clientX;
    y=ev.touches[0].clientY;
  } else { // Single touch
    x=ev.clientX;
    y=ev.clientY;
  }
  return new Coordinates(x, y);
}

function touchEnd (ev) {
  // If scrolling, return
  if (scrolling) {
    return;
  }
  // Possible to do start without move
  if (cellMoving != null) {
    cellMoving.style.zIndex = cellOriginalZIndex;
  }
  // If no curr coordinates, return
  if (currCoor==null) {
    return;
  }
  if (cellMoving!= null) {
    checkCellInBoard();
    cellMoving=null;
  }
}

function touchMove(ev) {
  // If scrolling or no start, return
  if (scrolling || startCoor==null || cellMoving==null) {
    return;
  }
  currCoor=getCoordinates(ev);
  cellMoving.style.left=(currCoor.x-startCoor.x)+"px";
  cellMoving.style.top=(currCoor.y-startCoor.y)+"px";
}

function touchStart(ev) {
  // Check for scrolling.
  var verticalScrolling=document.documentElement.clientHeight<(document.body.offsetHeight);
  var horizontalScrolling=document.documentElement.clientWidth<(document.body.offsetWidth);
  scrolling=verticalScrolling || horizontalScrolling;
  if (scrolling) {
    return;
  }
  var target=ev.target;
  // Only move board piece (not goals)
  if (target.className && target.className.indexOf("c")!=-1) {
    startCoor=getCoordinates(ev);
    target.style.position = "relative";
    // Get selected col and row
    var id=target.parentNode.getAttribute("id");
    var itemParts=id.split(",");
    selectedCol=extractNumber(itemParts[0]);
    selectedRow=extractNumber(itemParts[1]);
    // Bring to front
    cellOriginalZIndex=target.style.zIndex;
    target.style.zIndex=10000;
    // Element to move
    cellMoving=target;
    ev.preventDefault();
  }
}

//////////
// Mouse movement
//////////

function mouseX(evt) {
  if (evt.pageX) {
    return evt.pageX;
  }
  else if (evt.clientX) {
    return evt.clientX + scrollX();
  }
  else return null;
}

function mouseY(evt) {
  if (evt.pageY) {
    return evt.pageY;
  }
  else if (evt.clientY) {
    return evt.clientY+scrollY();
  }
  else return null;
}

function onMouseDown(e) {
  // If touch events are used and page scrolled, skip mouse events.  onclick will be used.
  // scrolling is only set in touch events.
  if (scrolling) {
    return false;
  }

  // Set event for IE
  if (e == null) {
    e = window.event;
  }
  // IE uses srcElement, others use target
  var target = e.target != null ? e.target : e.srcElement;
  // For IE, left click == 1. For Firefox, left click == 0
  if ((e.button == 1 && window.event != null || e.button == 0) && target.className && target.className.indexOf("c")!=-1) {
    target.style.position = "relative";
    // Get selected col and row
    var id=target.parentNode.getAttribute("id");
    var itemParts=id.split(",");
    selectedCol=extractNumber(itemParts[0]);
    selectedRow=extractNumber(itemParts[1]);
    // Grab the mouse position
    startCoor = new Coordinates(e.clientX, e.clientY);
    // Bring the clicked element to the front while it is being dragged
    cellOriginalZIndex = target.style.zIndex;
    target.style.zIndex = 10000;
    // For access the element in onMouseMove
    cellMoving = target;
    // Start moving the element with the mouse
    document.onmousemove = onMouseMove;
    // Cancel out any text selections
    document.body.focus();
    // Prevent text selection in IE
    document.onselectstart = function () {
      return false;
    };
    // Prevent IE from trying to drag an image
    target.ondragstart = function () {
      return false;
    };
    // Prevent text selection (except IE)
    return false;
  }
}

function onMouseMove(e) {
  // If touch events are used and page scrolled, skip mouse events.  onclick will be used.
  // scrolling is only set in touch events.
  if (scrolling) {
    return false;
  }

  if (e == null) {
    e = window.event;
  }
  if (startCoor!=null && cellMoving!=null) {
    cellMoving.style.left = (e.clientX - startCoor.x) + "px";
    cellMoving.style.top = (e.clientY - startCoor.y) + "px";
  }
}

function onMouseUp(e) {
  // If touch events are used and page scrolled, skip mouse events.  onclick will be used.
  // scrolling is only set in touch events.
  if (scrolling) {
    return false;
  }

  if (cellMoving != null) {
    cellMoving.style.zIndex = cellOriginalZIndex;
    // Set event for IE
    if (e == null){
      var e = window.event;
    }
    currCoor=new Coordinates(mouseX(e), mouseY(e));
    checkCellInBoard();
    // Reset events until next onmousedown
    document.onmousemove = null;
    document.onselectstart = null;
    cellMoving.ondragstart = null;
    cellMoving = null;
  }
}

function scrollX() {
  return document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft;
}

function scrollY() {
  return document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop;
}

//////////
// Time
//////////

function startTimer() {
  startTime=new Date().getTime();
  stopTimer();
  timeInterval=setInterval(calculateTime,250);
}

function stopTimer() {
  if (timeInterval) {
    clearInterval(timeInterval);
  }
}

function calculateTime() {
  var currentTime=new Date().getTime();
  var elapsedTime=Math.round((currentTime-startTime)/1000);
  updateElapsedTime(elapsedTime);
  return elapsedTime;
}

//////////
// Main
//////////

function initGame() {
  // Touch events
  var board=document.getElementById("board");
  board.addEventListener("touchstart", touchStart, false);
  board.addEventListener("touchmove", touchMove, false);
  board.addEventListener("touchend", touchEnd, false);
  // Mouse events
  document.onmousedown = onMouseDown;
  document.onmouseup = onMouseUp;
}

function startNewGame() {
  startCoor=null;
  currCoor=null;
  cellMoving=null;
  // Reset selected
  selectedCol=-1;
  selectedRow=-1;
  // Set rows/cols
  var size=parseInt(document.getElementById("size").value);
  maxCol=size;
  maxRow=size;
  // Create board and update display
  createBoard();
  updateBoard();
  updateBestTimeDisplay();
  // If game over, restart.
  if (checkGameOver()) {
    startNewGame();
  } else {
    // Start timer
    startTimer();
  }
}

</script>
</head>
<body onload="initGame();startNewGame();">
  <div id="board"></div>
  <div id="debug"></div>
  <!-- New Game -->
  <form action="">
    <p> Board Size
      <select id="size" name="size">
        <option value="2">2</option>
        <option value="3" selected="selected">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
        <option value="6">6</option>
        <option value="7">7</option>
        <option value="8">8</option>
        <option value="9">9</option>
        <option value="10">10</option>
      </select>
      <button onclick="startNewGame();return false;">New Game</button>
    </p>
  </form>
</body>
</html>