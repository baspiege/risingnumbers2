<!DOCTYPE HTML>
<!-- Copyright 2011 Brian Spiegel -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/>
<title>Mod 10</title>
<style type="text/css">
table.board {text-align:center;font-size:400%;font-weight:bold;border:1px solid black;}
table.board td {width:1em;border:1px solid black;}
.c1 {background-color: #ff0000; color: #ffffff;}
.c2 {background-color: #00ff00; color: #ffffff;}
.c3 {background-color: #0000ff; color: #ffffff;}
.c4 {background-color: #ff00ff; color: #000000;}
.c0 {background-color: #00ffff; color: #000000;}
.goal {background-color: #c0c0c0; color: #000000;}
.highlight {background-color: #ffffff; color: #000000;}
.highlightGoal { background-color: #ffff00; color: #000000;}
</style>

<script type="text/javascript">//<![CDATA[

// FE
// Best times
// Time component

//////////
// Global vars
//////////

var g_board;
var g_maxRow=0;
var g_maxCol=0;
var g_colGoals;
var g_rowGoals;
var g_selectedCol=-1;
var g_selectedRow=-1;

// Movement variables
var startCoor=null;
var currCoor=null;
var scrolling=false;
var cellMoving=null;
var cellOriginalZIndex=0;

//////////
// Utilities
//////////

// Create random number. 0 to max.
function createRandomNumber(max) {
  return Math.round( Math.random()*max );
}

function extractNumber(value) {
  var n = parseInt(value);
  return n == null || isNaN(n) ? 0 : n;
}

function shuffle(array) {
  var i = array.length;
  if (i==0) {
    return false;
  }
  while ( --i ) {
    var j = Math.floor( Math.random()*(i+1) );
    var tempi = array[i];
    var tempj = array[j];
    array[i] = tempj;
    array[j] = tempi;
  }
}

//////////
// Board utilities
//////////

// Check game over
// Also highlights goals
function checkGameOver() {
  var allAttained=true;
  for (var i=0;i<g_maxRow;i++) {
    if (getRowTotalMod10(i)==g_rowGoals[i]) {
      updateRowGoal(i,true);
    } else {
      updateRowGoal(i,false);
      allAttained=false;
    }
  }
  for (var i=0;i<g_maxCol;i++) {
    if (getColTotalMod10(i)==g_colGoals[i]) {
      updateColGoal(i,true);
    } else {
      updateColGoal(i,false);
      allAttained=false;
    }
  }
  // If all attained
  if (allAttained) {
    alert("Done!");
  }
}

// Get col total
function getColTotalMod10(col) {
  var colCount=0;
  for (var i=0;i<g_maxRow;i++) {
    var num=g_board[col][i];
    colCount+=num;
  }
  return colCount%10;
}

// Get row total
function getRowTotalMod10(row) {
  var rowCount=0;
  for (var i=0;i<g_maxCol;i++) {
    var num=g_board[i][row];
    rowCount+=num;
  }
  return rowCount%10;
}

//////////
// Action
//////////

// Select cell
function selectCell(col,row)
{
  // If no previous selected, select.
  if (g_selectedCol==-1 && g_selectedRow==-1) {
    g_selectedCol=col;
    g_selectedRow=row;
    updateCell(col,row,true); // Highlight selected
  }
  // If selected is same as previous, unselect.
  else if (g_selectedCol==col && g_selectedRow==row) {
    g_selectedCol=-1;
    g_selectedRow=-1;
    updateCell(col,row,false);
  }
  // Switch cells
  else {
    var selectedNumber=g_board[g_selectedCol][g_selectedRow];
    g_board[g_selectedCol][g_selectedRow]=g_board[col][row];
    g_board[col][row]=selectedNumber;
    // Update display
    updateCell(g_selectedCol,g_selectedRow,false);
    updateCell(col,row,false);
    // Deselect for next
    g_selectedCol=-1;
    g_selectedRow=-1;
    checkGameOver();
  }
}

//////////
// Set-up
//////////

// Create board
function createBoard() {
  g_board=new Array(g_maxCol);
  for (var i=0;i<g_maxCol;i++) {
    g_board[i]=new Array();
    for (var j=0;j<g_maxRow;j++) {
      g_board[i].push( createRandomNumber(9) );
    }
  }
  // Col goals
  g_colGoals=new Array();
  for (var i=0;i<g_maxCol;i++) {
    g_colGoals.push( getColTotalMod10(i) );
  }
  // Row goals
  g_rowGoals=new Array();
  for (var i=0;i<g_maxRow;i++) {
    g_rowGoals.push( getRowTotalMod10(i) );
  }
  // Put columns into one array and shuffle.
  var numbers=new Array();
  for (var i=0;i<g_maxCol;i++) {
    numbers=numbers.concat(g_board[i]);
  }
  // Shuffle 3 times
  shuffle(numbers);
  shuffle(numbers);
  shuffle(numbers);
  // Put back
  for (var j=g_maxRow-1; j>-1 ; j--) {
    for (var i=0;i<g_maxCol;i++) {
      g_board[i][j]= numbers.shift();
    }
  }
}

//////////
// Display
//////////

// Create board display
function createBoardDisplay() {
  var display="<table class=\"board\">";
  for (var i=g_maxRow-1; i>-1 ; i--) {
    display+="<tr>";
    for (var j=0; j<g_maxCol; j++) {
      var number=g_board[j][i];
      display+="<td id=\"" + j + "," + i + "\"";
      display+="onclick=\"selectCell(" + j + "," + i + ")\">";
      display+="<div class=\"c" + number%5 + "\">";
      display+=number;
      display+="</div></td>";
    }
    // Row goals
    display+="<td id=\"rg" + i + "\" class=\"goal\">";
    display+=g_rowGoals[i];
    display+="</td>";
    display+="</tr>";
  }
  // Bottom row - column goals
  display+="<tr>";
  for (var j=0; j<g_maxCol; j++) {
    display+="<td id=\"cg" + j + "\" class=\"goal\">";
    display+=g_colGoals[j];
    display+="</td>";
  }
  display+="<td>G</td></tr>";
  display+="</table>";
  return display;
}

// Update board
function updateBoard() {
  document.getElementById("board").innerHTML=createBoardDisplay();
}

// Update cell
function updateCell(col,row,highlight) {
  var number=g_board[col][row];
  var className;
  if (highlight==true) {
    className="highlight";
  } else {
    className="c" + number%5;
  }
  var cell=document.getElementById( col + "," + row);
  cell.innerHTML="<div class=\"" + className + "\">" + number + "</div>";
}

// Update col goal
function updateColGoal(col,highlight) {
  var goal=document.getElementById( "cg" + col);
  if (highlight) {
    goal.className="highlightGoal";
  } else {
    goal.className="goal";
  }
}

// Update debug
function updateDebug(message) {
  document.getElementById("debug").innerHTML=message;
}

// Update row goal
function updateRowGoal(row,highlight) {
  var goal=document.getElementById( "rg" + row);
  if (highlight) {
    goal.className="highlightGoal";
  } else {
    goal.className="goal";
  }
}

//////////
// Movement Utilties
//////////

// Uses global variables startCoor, currCoor, and cellMoving
function checkCellInBoard() {
  var moving=false;
  // Check if in board
  var moving=false;
  var rows=document.getElementById("board").getElementsByTagName("tr");
  for (var i=0;i<(rows.length-1);i++){
    if (checkInElement(rows[i], currCoor.x, currCoor.y)){
      // Check if in cell.
      var cols=rows[i].getElementsByTagName("td");
      for (var j=0;j<(cols.length-1);j++){
        if (checkInElement(cols[j], currCoor.x, currCoor.y)){
          moving=true;
          // Get location
          var id=cols[j].getAttribute('id');
          var itemParts=id.split(",");
          var col=extractNumber(itemParts[0]);
          var row=extractNumber(itemParts[1]);
          // Switch numbers
          selectCell(col,row)
          // Reset position
          cellMoving.style.position = "static";
          cellMoving.style.left = 0;
          cellMoving.style.top = 0;
          // Reset variables
          startCoor=null;
          currCoor=null;
          return;
        }
      }
    }
  }
  // Revert back.
  if (!moving) {
    cellMoving.style.position = "static";
    cellMoving.style.left = 0;
    cellMoving.style.top = 0;
  }
}

function checkInElement(element, posX, posY) {
  var coor = findPos(element);
  var targPosX = coor.x;
  var targPosY = coor.y;
  var targWidth = extractNumber(element.offsetWidth);
  var targHeight = extractNumber(element.offsetHeight);
  if ((posX > targPosX) && (posX < (targPosX + targWidth)) && (posY > targPosY) && (posY < (targPosY + targHeight))) {
      return true;
  }
  return false;
}

// Coordinates for movement
function Coordinates(x, y) {
  this.x=x;
  this.y=y;
}

function findPos(obj) {
  var left=0;
  var top=0;
  if (obj.offsetParent) {
    do {
      left += obj.offsetLeft;
      top += obj.offsetTop;
    } while (obj = obj.offsetParent);
  }
  return new Coordinates(left,top);
}

//////////
// Touch movement
//////////

// Get coordinates from a touch event
function getCoordinates(ev) {
  var x;
  var y;
  if (ev.touches && ev.touches.length) { // Multi touch
    x = ev.touches[0].clientX;
    y = ev.touches[0].clientY;
  } else { // Single touch
    x = e.clientX;
    y = e.clientY;
  }
  return new Coordinates(x, y);
}

function touchEnd (ev) {
  // If scrolling, return
  if (scrolling) {
    return;
  }
  // Possible to do start without move
  if (cellMoving != null) {
    cellMoving.style.zIndex = cellOriginalZIndex;
  }
  // If no curr coordinates, return
  if (currCoor==null) {
    return;
  }
  if (cellMoving != null) {
    checkCellInBoard();
    cellMoving = null;
  }
}

function touchMove(ev) {
  // If scrolling or no start, return
  if (scrolling || startCoor==null || cellMoving==null) {
    return;
  }
  currCoor=getCoordinates(ev);
  cellMoving.style.left = (currCoor.x - startCoor.x) + 'px';
  cellMoving.style.top = (currCoor.y - startCoor.y) + 'px';
}

function touchStart(ev) {
  // Check for scrolling.
  var verticalScrolling=document.documentElement.clientHeight<(document.body.offsetHeight);
  var horizontalScrolling=document.documentElement.clientWidth<(document.body.offsetWidth);
  scrolling=verticalScrolling || horizontalScrolling;
  if (scrolling) {
    return;
  }
  var target=ev.target;
  // Only move board piece (not goals)
  if (target.className && target.className.indexOf("c")!=-1) {
    startCoor=getCoordinates(ev);
    target.style.position = "relative";
    // Get selected col and row
    var id=target.parentNode.getAttribute('id');
    var itemParts=id.split(",");
    g_selectedCol=extractNumber(itemParts[0]);
    g_selectedRow=extractNumber(itemParts[1]);
    // Bring to front
    cellOriginalZIndex = target.style.zIndex;
    target.style.zIndex = 10000;
    // Element to move
    cellMoving = target;
    ev.preventDefault();
  }
}

//////////
// Mouse movement
//////////

function mouseX(evt) {
  if (evt.pageX) {
    return evt.pageX;
  }
  else if (evt.clientX) {
    return evt.clientX + scrollX();
  }
  else return null;
}

function mouseY(evt) {
  if (evt.pageY) {
    return evt.pageY;
  }
  else if (evt.clientY) {
    return evt.clientY + scrollY();
  }
  else return null;
}

function onMouseDown(e) {
  // If touch events are used and page scrolled, skip mouse events.  onclick will be used.
  // scrolling is only set in touch events.
  if (scrolling) {
    return false;
  }

  // Set event for IE
  if (e == null) {
    e = window.event;
  }
  // IE uses srcElement, others use target
  var target = e.target != null ? e.target : e.srcElement;
  // For IE, left click == 1. For Firefox, left click == 0
  if ((e.button == 1 && window.event != null || e.button == 0) && target.className && target.className.indexOf("c")!=-1) {
    target.style.position = "relative";
    // Get selected col and row
    var id=target.parentNode.getAttribute('id');
    var itemParts=id.split(",");
    g_selectedCol=extractNumber(itemParts[0]);
    g_selectedRow=extractNumber(itemParts[1]);
    // Grab the mouse position
    startCoor = new Coordinates(e.clientX, e.clientY);
    // Bring the clicked element to the front while it is being dragged
    cellOriginalZIndex = target.style.zIndex;
    target.style.zIndex = 10000;
    // For access the element in onMouseMove
    cellMoving = target;
    // Start moving the element with the mouse
    document.onmousemove = onMouseMove;
    // Cancel out any text selections
    document.body.focus();
    // Prevent text selection in IE
    document.onselectstart = function () {
      return false;
    };
    // Prevent IE from trying to drag an image
    target.ondragstart = function () {
      return false;
    };
    // Prevent text selection (except IE)
    return false;
  }
}

function onMouseMove(e) {
  // If touch events are used and page scrolled, skip mouse events.  onclick will be used.
  // scrolling is only set in touch events.
  if (scrolling) {
    return false;
  }

  if (e == null) {
    e = window.event;
  }
  if (startCoor!=null && cellMoving!=null) {
    cellMoving.style.left = (e.clientX - startCoor.x) + 'px';
    cellMoving.style.top = (e.clientY - startCoor.y) + 'px';
  }
}

function onMouseUp(e) {
  // If touch events are used and page scrolled, skip mouse events.  onclick will be used.
  // scrolling is only set in touch events.
  if (scrolling) {
    return false;
  }

  if (cellMoving != null) {
    cellMoving.style.zIndex = cellOriginalZIndex;
    // Set event for IE
    if (e == null){
      var e = window.event;
    }
    currCoor=new Coordinates(mouseX(e), mouseY(e));
    checkCellInBoard();
    // Reset events until next onmousedown
    document.onmousemove = null;
    document.onselectstart = null;
    cellMoving.ondragstart = null;
    cellMoving = null;
  }
}

function scrollX() {
  return document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft;
}

function scrollY() {
  return document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop;
}

//////////
// Main
//////////

function initGame() {
  // Touch events
  var board=document.getElementById("board");
  board.addEventListener('touchstart', touchStart, false);
  board.addEventListener('touchmove', touchMove, false);
  board.addEventListener('touchend', touchEnd, false);
  // Mouse events
  document.onmousedown = onMouseDown;
  document.onmouseup = onMouseUp;
}

function startNewGame() {
  startCoor=null;
  currCoor=null;
  cellMoving=null;
  // Reset selected
  g_selectedCol=-1;
  g_selectedRow=-1;
  // Set rows/cols
  var size=parseInt(document.getElementById("size").value);
  g_maxCol=size;
  g_maxRow=size;
  // Create board and update display
  createBoard();
  updateBoard();
  // Check game over - for highlighting and it's of course possible :)
  checkGameOver();
}

//]]></script>
</head>
<body onload="initGame();startNewGame();">
  <p> G = (&#8721; n) % 10</p>
  <div id="board"></div>
  <div id="debug"></div>
  <!-- New Game -->
  <form action="">
    <p> Board Size
      <select id="size" name="size">
        <option value="2">2</option>
        <option value="3" selected="selected">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
        <option value="6">6</option>
        <option value="7">7</option>
        <option value="8">8</option>
        <option value="9">9</option>
        <option value="10">10</option>
      </select>
      <button onclick="startNewGame();return false;">New Game</button>
    </p>
  </form>
</body>
</html>